import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:nitwixt/models/models.dart' as models;

import 'collections.dart' as collections;

class DatabaseUser {

  DatabaseUser({this.id});

  final String id;

  final CollectionReference userCollection = collections.userCollection;

  static models.User userFromDocumentSnapshot(DocumentSnapshot snapshot) {
    return models.User.fromFirebaseObject(snapshot.documentID, snapshot.data);
  }

  Stream<models.User> get userStream {
    return userCollection.document(id).snapshots().map(userFromDocumentSnapshot);
  }

  Future<models.User> get userFuture async {
    final DocumentSnapshot documentSnapshot = await userCollection.document(id).get();
    return userFromDocumentSnapshot(documentSnapshot);
  }

  static List<models.User> userFromQuerySnapshot(QuerySnapshot querySnapshot) {
    return querySnapshot.documents.map(userFromDocumentSnapshot).toList();
  }

  static Stream<List<models.User>> getUserList({String chatid}) {
    final Query query = collections.userCollection.where(models.UserKeys.chats, arrayContains: chatid);
    return query.snapshots().map(userFromQuerySnapshot);
  }

  static Stream<Map<String, models.User>> getUserMap({String chatid}) {
    final Query query = collections.userCollection.where(models.UserKeys.chats, arrayContains: chatid);
    return query.snapshots().map((QuerySnapshot querySnapshot) {
      return userFromQuerySnapshot(querySnapshot).asMap().map<String, models.User>((int index, models.User user) {
        return MapEntry<String, models.User>(user.id, user);
      });
    });

  }

  static Future<void> createEmptyUser({String id}) async {
    /// id is used when I when to create a user with a fixed id (from the FirebaseUser id)
    /// If id is not provided, an automatic id will be generated by Firebase
    models.User user = models.User();
    if (id == null || id.isEmpty) {
      // Create a new user and send back the id
      final DocumentReference documentReference = await collections.userCollection.add(user.toFirebaseObject());
      await collections.userCollection.document(documentReference.documentID).updateData(<String, dynamic>{
        models.UserKeys.id: documentReference.documentID,
      });
      return documentReference.documentID;
    } else {
      // The id is provided, then I have to create the user and document with the specified id
      user.id = id;
      return await collections.userCollection.document(id).setData(user.toFirebaseObject());
    }
  }

  static Future createUser({String id, models.User user}) async {
    /// id is used when I when to create a user with a fixed id (from the FirebaseUser id)
    /// If user if not provided, an empty one is created
    /// If id is not provided, an automatic id will be generated by Firebase
    if (user == null) {
      return createEmptyUser(id: id);
    } else {
      String id_;   // The final id
      if (id == null || id.isEmpty) {
        id_ = user.id;
      } else {
        id_ = id;
      }
      if (id_ == null || id_.isEmpty) {
        // There is no id provided as an argument or in the user
        final DocumentReference documentReference = await collections.userCollection.add(user.toFirebaseObject());
        await collections.userCollection.document(documentReference.documentID).updateData(<String, dynamic>{
          'id': documentReference.documentID,
        });
        return documentReference.documentID;

      } else {
        // I have an id to consider
        user.id = id_;
        return await collections.userCollection.document(id_).setData(user.toFirebaseObject());
      }
    }
  }

  static Future<bool> userIdExists({String id}) async {
    final DocumentSnapshot documents = await collections.userCollection.document(id).get();
    return documents.exists;
  }

  Future<bool> exists() {
    return userIdExists(id: id);
  }

  Future<void> update(Map<String, dynamic> obj) async {
    return await userCollection.document(id).updateData(obj);
  }

  static Future<List<models.User>> usersFromField(List<String> fieldValuesList, {String fieldName = 'username'}) async {
    if (fieldValuesList.isEmpty) {
      return Future.error('No username provided');
    }
    // Get the
    final List<QuerySnapshot> documentsList = await Future.wait(fieldValuesList.map((String username) async {
      return await collections.userCollection.where(fieldName, isEqualTo: username).getDocuments();
    }));
    final List<String> unkownUsers = <String>[];
    documentsList.asMap().forEach((int index, QuerySnapshot documents) {
      if (documents.documents.isEmpty) {
        unkownUsers.add(fieldValuesList[index]);
      }
    });
    if (unkownUsers.isNotEmpty) {
      // Some users have not been found
      if (unkownUsers.length == 1) {
        return Future.error('User "${unkownUsers[0]}" doesn\'t exist');
      } else {
        return Future.error('Users "${unkownUsers.join('", "')}" don\'t exist');
      }
    }
    // All the users have been found
    final List<models.User> allUserList = documentsList.map((QuerySnapshot documents) {
      return DatabaseUser.userFromDocumentSnapshot(documents.documents[0]);
    }).toList();


    return allUserList;
  }
}

